{"version":3,"sources":["components/graph.jsx","components/SearchArtist.jsx","App.js","serviceWorker.js","index.js"],"names":["Graph","artistAudioFeatures","data","label","Object","keys","map","key","Number","series","React","useMemo","type","getSeriesStyle","useCallback","transition","getDatumStyle","axes","primary","position","stacked","max","className","style","width","height","dark","SearchArtist","state","Image","src","this","props","artistStats","images","url","roundedCircle","Form","Group","controlId","Control","ref","input","textInput","placeholder","Text","Button","onClick","onGetArtistAudioInfo","value","variant","block","name","Component","App","handleGetArtistAudioInfo","artist","fetch","then","response","ok","json","Error","setState","catch","error","assign","console","log","audiofeatures","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.611a6e74.chunk.js","sourcesContent":["import React from 'react'\nimport { Chart } from 'react-charts'\nimport '../App.css';\n\nconst Graph = ({artistAudioFeatures}) => {\n\n    const audiofeatures = Object.keys(artistAudioFeatures).map(function(key) {\n        return [key, Number(artistAudioFeatures[key])];\n    });\n\n    const data = [\n            {\n                label: 'Series 1',\n                data: audiofeatures\n            }\n        ]\n\n    const series = React.useMemo(\n        () => ({\n            type: 'bar'\n        }),\n        []\n    )\n\n    const getSeriesStyle = React.useCallback(\n        () => ({\n            transition: 'all .5s ease'\n        }),\n        []\n    )\n    const getDatumStyle = React.useCallback(\n        () => ({\n            transition: 'all .5s ease'\n        }),\n        []\n    )\n    const axes = React.useMemo(\n        () => [\n            {primary: true, type: 'ordinal', position: 'bottom'},\n            {type: 'linear', position: 'left', stacked: false, max:10}\n        ],\n        []\n    )\n\n\n   return( <div className=\"item\" style={{ width: '800px',  height: '528px'  }}>\n        <Chart\n            data={data}\n            axes={axes}\n            series={series}\n            getSeriesStyle={getSeriesStyle}\n            getDatumStyle={getDatumStyle}\n            dark/>\n           <p></p>\n           <h1 >Mean of Top Tracks Audio Features</h1>\n       </div>\n    );\n\n};\n\nexport default Graph;","import React, {Component} from 'react';\nimport Image from \"react-bootstrap/Image\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport '../App.css';\n\nclass SearchArtist extends Component {\n    state = {};\n\n    render() {\n\n        return (\n            <div className=\"item\">\n                <Image src={this.props.artistStats.images[0].url} height=\"320\" width=\"320\"  roundedCircle/>\n                <p></p>\n                <p></p>\n                <Form>\n                    <Form.Group controlId=\"formSearchArtist\">\n                        <Form.Control ref={input => this.textInput = input} type=\"artist\" placeholder=\"Enter Artist\" />\n                        <Form.Text className=\"text-muted\">\n                        </Form.Text>\n                    </Form.Group>\n                    <Button onClick={() => this.props.onGetArtistAudioInfo(this.textInput.value)} variant=\"outline-primary\" block>\n                        Get Artist Statistics\n                    </Button>\n                </Form>\n                <p></p>\n                <h1 > {this.props.artistStats.name}</h1>\n            </div>\n        );\n    }\n}\n\nexport default SearchArtist;","import React, {Component} from 'react';\nimport './App.css';\nimport Graph from \"./components/graph\";\nimport SearchArtist from \"./components/SearchArtist\";\n\nclass App extends Component {\n\n    state = {\n        \"artistStats\":{\n                        \"name\": null,\n                        \"followers\": {\n                            \"href\": null,\n                            \"total\": null\n                        },\n                        \"images\":[{\n                                    \"height\": null,\n                                    \"width\": null,\n                                    \"url\":\"https://dummyimage.com/320X320/4bb6e6/4bb6e6\"\n                                    }]\n                        },\n        \"audiofeatures\":{\"Acousticness\": 0,\n            \"Danceability\": 0,\n            \"Valence\":0,\n            \"Energy\": 0,\n            \"Speechiness\": 0,\n            \"Liveness\": 0,\n            \"Instrumentalness\": 0}\n    };\n\n    componentDidMount() {\n    }\n\n\n    handleGetArtistAudioInfo = (artist) => {\n        fetch('/api/artists/' + artist)\n            .then(function(response) {\n                if(response.ok){\n                    return response.json();\n                }\n                throw new Error('Something went wrong with request.');\n                })\n            .then(response => {this.setState({\"artistStats\":response})})\n            .catch( error => {\n                this.setState({\n                        artistStats: Object.assign({}, this.state.artistStats, {\n                            name: \"Artist Not Found\",\n                    }),\n                })\n                this.setState({\n                    artistStats: Object.assign({}, this.state.artistStats, {\n                        images:[{\n                            \"height\": null,\n                            \"width\": null,\n                            \"url\":\"https://dummyimage.com/320X320/4bb6e6/4bb6e6\"\n                        }],\n                    }),\n                })\n                console.log(\"request failed\", error)\n            });\n        fetch('/api/artists/' + artist + \"/toptracks/audiofeatures/mean\")\n            .then(function(response) {\n                if(response.ok){\n                    return response.json();\n                }\n                throw new Error('Something went wrong with request.');\n            })\n            .then(response => {this.setState({audiofeatures:response})})\n            .catch( error => {\n                const defaultAudioFeatures = {\n                    \"Acousticness\": 0,\n                    \"Danceability\": 0,\n                    \"Valence\":0,\n                    \"Energy\": 0,\n                    \"Speechiness\": 0,\n                    \"Liveness\": 0,\n                    \"Instrumentalness\": 0\n                };\n                this.setState({audiofeatures:defaultAudioFeatures})\n                console.log(\"request failed\", error)\n            });\n    };\n\n    render() {\n            return (\n                <div className=\"App\" >\n                <header className=\"App-header\">\n                    <h1>Spotistics</h1>\n                    <p></p>\n                    <p></p>\n                    <div className=\"flexbox-container\">\n                    <SearchArtist  className=\"item\" onGetArtistAudioInfo={this.handleGetArtistAudioInfo} artistStats={this.state.artistStats} />\n                        <Graph className=\"item\" artistAudioFeatures={this.state.audiofeatures}/>\n                </div>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}